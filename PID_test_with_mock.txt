We want a class that implements a PID controller for a single
variable. The measurement, setpoint, and output should all be real
numbers. The constructor should accept an initial measurement value in
addition to the gains and setpoint.

>>> from unittest.mock import Mock, patch
>>> with patch('time.time', Mock(side_effect = [1.0,2.0,3.0,4.0,5.0])):
...     import pid
...     controller = pid.PID(P=0.5, I=0.5, D=0.5, setpoint=0, initial=12)
...     assert controller.gains ==(0.5, 0.5, 0.5)
...     assert controller.setpoint==[0.0]
...     assert controller.previous_time==1.0
...     assert controller.previous_error==-12.0
...     assert controller.integrated_error==0.0

The constructor should also optionally accept a parameter specifying
when the initial measurement was taken.
Make sure we're not inheriting old state from the constructor tests
>>> import imp
>>> pid = imp.reload(pid)
>>> controller = pid.PID(P = 0.5, I = 0.5, D = 0.5, setpoint = 1,
... initial = 12, when = 43)
>>> controller.gains
(0.5, 0.5, 0.5)
>>> controller.setpoint
[1.0]
>>> controller.previous_time
43.0
>>> controller.previous_error
-11.0
>>> controller.integrated_error
0.0


The calculate response method receives the measured value as input,
and returns the control signal.

>>> with patch('time.time', Mock(side_effect = [2.0, 3.0, 4.0, 5.0])):
...     pid = imp.reload(pid)
...     mock = Mock()
...     mock.gains = (0.5, 0.5, 0.5)
...     mock.setpoint = [0.0]
...     mock.previous_time = 1.0
...     mock.previous_error = -12.0
...     mock.integrated_error = 0.0
...     assert pid.PID.calculate_response(mock, 6) == -3.0
...     assert pid.PID.calculate_response(mock, 3) == -4.5
...     assert pid.PID.calculate_response(mock, -1.5) == -0.75
...     assert pid.PID.calculate_response(mock, -2.25) == -1.125

The calculate_response method should be willing to accept a parameter
specifying at what time the call is happening.

>>> with patch('time.time', Mock(side_effect = [5.0, 6.0, 7.0, 8.0, 9.0])):
...     id = imp.reload(pid)
...     mock = Mock()
...     mock.gains = (0.5, 0.5, 0.5)
...     mock.setpoint = [0.0]
...     mock.previous_time = 1.0
...     mock.previous_error = -12.0
...     mock.integrated_error = 0.0
...     assert pid.PID.calculate_response(mock, 6, 2) == -3.0
...     assert pid.PID.calculate_response(mock, 3, 3) == -4.5
...     assert pid.PID.calculate_response(mock, -1.5, 4) == -0.75
...     assert pid.PID.calculate_response(mock, -2.25, 5) == -1.125


We need to be able to adjust the setpoint at runtime, but we want it
to have a memory, so that we can easily return to the previous
setpoint.
>>> pid = imp.reload(pid)
>>> controller = pid.PID(P = 0.5, I = 0.5, D = 0.5, setpoint = 0, initial=12)
>>> controller.push_setpoint(7)
>>> controller.setpoint
[0.0, 7.0]

>>> controller.push_setpoint(8.5)
>>> controller.setpoint
[0.0, 7.0, 8.5]

>>> controller.pop_setpoint()
8.5
>>> controller.setpoint
[0.0, 7.0]

>>> controller.pop_setpoint()
7.0
>>> controller.setpoint
[0.0]

>>> controller.pop_setpoint()
Traceback (most recent call last):
ValueError: PID controller must have a setpoint